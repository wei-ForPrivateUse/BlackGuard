/*
 * Replay.h
 *
 *  Created on: Jan 14, 2015
 *      Author: wei
 */

#ifndef REPLAY_H_
#define REPLAY_H_

#include <iostream>
#include <fstream>

/// Simulation entrance.
class Replay: public Test {
public:
	Replay() {
		ANNWeights* arbi = new ANNWeights({8, 20, 3}, {false, true, false}, {false, true, true}, true);
		ANNWeights* w1 = new ANNWeights({14, 20, 2}, {false, true, false}, {false, true, true}, true);
		ANNWeights* w2 = new ANNWeights({19, 20, 2}, {false, true, false}, {false, true, true}, true);
		ANNWeights* w3 = new ANNWeights({14, 20, 2}, {false, true, false}, {false, true, true}, true);

		ANNWeights* wa_a = new ANNWeights({28, 20, 2}, {false, true, false}, {false, true, true}, true);
		ANNWeights* wa_d = new ANNWeights({28, 20, 3}, {false, true, false}, {false, true, true}, true);

		//double arbi_c[] = {};
		double w1_c[] = {0.6265354022856425, 0.6530069254658386, 0.5728130309246787, 0.8013825023351742, -0.1315928966192233, -0.26775215125096463, 0.4836753278778654, 0.3892314010300594, -0.6076248551988253, 0.34101266957535004, 0.44417790052715705, 0.5242139598678287, -0.007617372117280571, -0.6113872872015365, -0.00889228067582521, -0.4128345934150268, 0.07009386127177765, -0.5772827070924126, 0.6787553798871057, 0.4639611182058311, 0.0928786544562121, 0.574446102439661, 0.6592174277601791, 0.5203814459437744, -0.12860513551433275, 0.2205272850206419, -0.20175238092228304, -0.5642301510100123, -0.793497589099891, -0.8028382709098631, 0.3803815377933094, -0.06648168585141168, -0.6218068081614839, -0.4942155390009475, 0.07182672306642743, -0.5021329136992011, -0.3927813928042512, -0.2600278824886008, 0.3741088021656564, 0.6394314775495845, 0.39771974971910384, -0.30801640766080074, -0.06463287261620938, 0.2775526250669241, 0.5220210047297361, 0.2391839881536285, -0.7032549983448267, 0.43839192466499827, 0.10732942415298159, -0.4229763323084944, 0.341907606410219, -0.454335081910613, -0.03998649708697893, -0.09073643432836033, -0.2031964448292431, 0.13158714904843233, 0.13424031089617908, -0.13106497425991814, -0.8027584069885998, 0.7545494246029111, -0.5202190586822962, -0.17607534589331736, -0.6113620066720933, 0.23042287327339533, -0.1237011307447962, -0.4969277928558964, 0.09946836437992951, 0.6535230132062175, -0.2031046045382938, 0.38467720095116564, -0.055157325079177144, -0.01305910207768915, 0.22762277996627603, -0.058553327577286034, -0.7859718752273437, 0.6173042148473814, 0.6273515192286715, -0.21845953492251524, -0.39268453276159243, -0.31358690180160964, 0.29560539133421626, 0.12569572361837067, -0.2965538956451968, -0.3407155386268023, 0.7032339727583311, -0.4743788088570088, -0.4542964879773511, -0.3797001803767118, 0.3854155102531574, 0.3345917730901783, 0.006097430447601799, -0.7598622573251108, -0.47374757870591383, 0.01441955643973307, -0.6357934187504728, 0.5626864268628848, 0.135078484159379, 0.0939254812582471, -0.04112316612806653, -0.4987989892279885, 0.003109199865110157, -0.7545835912365079, 0.12596532104791694, -0.28904626452941873, 0.6298906726020034, 0.07395606830740847, 0.500860685069472, 0.19238238882767644, -0.4570336214669002, 0.001793708066289812, -0.2665556399158029, -0.2077563304050769, 0.5109518916058302, -0.25062453206248275, -0.5682433404208914, 0.5321456331586281, 0.5759583105180882, 0.13984306839770771, 0.17562844919914392, -0.5051615394775493, -0.4016524661604743, -0.689197335470433, 0.2907918969658747, -0.6943065349084697, -0.6177481846147923, 0.14251536279587496, -0.5059663799007981, 0.6268716634592215, 0.5301334685698732, 0.04708694010148039, -0.5781495768497216, 0.4723900224709752, 0.5759068665321837, 0.7751752862422916, -0.23714597431450654, 0.34105237550878825, 0.11428805156064537, 0.6143973069658641, 0.6060311732240039, -0.7474701089564997, 0.6254260839919878, -0.540636831461677, 0.19927310966367257, -0.7775845199206766, -0.45773075773607474, -0.07081854896366253, 0.7361514851540336, 0.45786759685107226, -0.3478067296600959, 0.37283589988165244, 0.17612658963827096, 0.18521320926089418, 0.8607372792220884, 0.6120895339826596, 0.5078169150013766, -0.6224972160991011, 0.7879833099760928, -0.43156323418845877, 0.5704548506704019, 0.3290326059018788, 0.07530514030751699, -0.15444868279604268, 0.26260628177222767, -0.6900527896102796, -0.49132841978868097, -0.22839909375329584, 0.08458380473890242, 0.2670914823534973, 0.19831538578569985, 0.021898496152025534, -0.07835757081955244, 0.4449325667941015, 0.0398796693253694, 0.4381749970266217, -0.56459180197803, -0.4286535366226327, -0.38409290068589125, 0.5306172483721782, 0.44948992175159097, 0.37067553774129086, -0.6593591430175387, -0.2855141907658384, -0.5536899772778385, 0.12384577696552737, 0.3476292404651291, 0.27376359586435817, 0.4209412610136969, -0.37687714527425825, -0.1784731303124847, -0.17525419080441193, 0.3754743313365073, -0.040606941181576844, -0.5228371197971899, -0.22756379637122864, 0.3469330784167922, -0.5106774551064972, 0.6663059439649679, 0.02356964003613341, -0.25221593015058186, 0.06833308231928972, 0.1936872398102299, -0.5637127610405898, 0.37928960093200864, -0.4952512233194994, 0.42881458889781865, -0.3049065928372779, 0.28727888091293086, 0.5574704131216768, -0.4431640101571869, 0.051355242504335874, -0.7767779326789801, 0.3534144849100902, 0.43120384736175027, 0.7041968065719879, -0.5074694984606091, 0.4022851507518368, 0.1400026965835484, -0.21663066077453091, -0.3317925383779377, -0.6740173826237595, -0.4009577741219548, 0.6078127049850248, -0.13919919776416817, -0.10987130909813164, -0.6243926032556694, -0.05925388594051748, 0.37533396381893674, -0.6300627040355062, -0.3851130653673831, 0.6032451028995203, -0.4176148269417392, -0.21445485032483436, 0.23386109327401866, -0.23994202708414486, 0.43845490842615015, -0.5268630200666611, 0.14732225192160617, -0.6148585593109057, -0.5585326290985365, 0.02376641042029793, 0.28357722241542505, 0.08325333403974466, -0.8255977460713749, 0.4146665804843875, 0.38905419669944363, -0.19047126162129102, 0.5840863996382384, 0.12223695377645886, 0.08387908062469378, -0.14483023919425372, 0.22821198690813482, -0.4013351836933404, -0.666152093174617, -0.04816686819778692, -0.2837737729969752, 0.08232967661594355, -0.3691587552448274, -0.13310819528067144, -0.2663719854660316, -0.2203714748276626, 0.15170647877506788, -0.425930925566642, 0.2354013557491603, -0.3404920392685511, 0.42018100548482334, -0.5643448601127441, 0.5154124778436269, 0.05649493896976522, 0.09982335484001748, 0.3311241863592112, -0.5213164588146124, -0.7106222580373032, -0.08010128402436806, 0.007546486651198194, -0.22708925337385033, -0.04031801410672872, 0.10611690826695858, -0.1262643590881812, -0.43329213680351963, -0.5812798155931885, 0.5925568379354557, 0.7645305664712627, -0.6949311959205642, 0.5722022667600724, 0.18738204567722241, 0.46247249675818536, -0.7695575256590383, -0.06689676126744108, -0.6536821788001553, -0.5448502047818177, -0.6403925690679855, -0.37561424238030344, 0.6825591886622664, 0.44307815648058096, 0.8120953399105681, 0.642285493072599, -0.006052520304819772, -0.6012507262778463, 0.7450896027573465, -0.006774287860483369, -0.5435959974446811, 0.5689430401209735, 0.721981302472967, 0.6662650819245118, 0.595615201414167, 0.30004824892854964, 0.5432087808994424, -0.6231526625340252, -0.2345862129033767, -0.4176767331793826, -0.07695298831161561, -0.34905668419552727, 0.7371770608093763, 0.041840147311589235, -0.1729439302730319, -0.5455482579301986, 0.676115175590208, 0.8287029478845472, 0.023485163255897, 0.7551260313328241, -0.17970521107962614, 0.38585461066641463, 0.3455060387450938, 0.4016066686428791, -0.6850386575012111, -0.5404104330897161, 0.46222305735767466, 0.37576953253809575, -0.16105693913419433, -0.31033695517343424, 0.15702712314367306, 0.13761449453052793, 0.4163058497547868, -0.14135591421959798, -0.08392972525613737, 0.28815583405853157, -0.04042959585233405, 0.3789523010614183, 0.2048250892565078, -0.37420982634807565, 0.16752301297214695, -0.5255967084888888, 0.6469111587384008, -0.04016363273391624, 0.7308375669188683, 0.34500268054109207, -0.4670767124337559, -0.10853482473280734, -0.25102344338290195, 0.16952837893407602, 0.6408148162708054, -0.11747409958812485, -0.7158830929162506, 0.4480765362857155, 0.5741319909953877, -0.0013196028990008976, 0.061800081360035744, 0.08770859201729081, 0.7438408552590863, 0.40824098905906814, 0.6590459929701509, -0.1338262996785748, -0.07669173403640903, 0.26469436835196514, 0.5924952469082634, -0.1798617188524404, 0.4886027993326266, 0.732300881969665, 0.18542502091695331, 0.2491329699510288, 0.25797530196892715, -0.07546266448875921, -0.42123947854634963, 0.2910267537582039, 0.46551796187158084, 0.5076705280535077, -0.07866472579609786, -0.4747205911229989, 0.6421271624262511, 0.1565975495983497, -0.08150112392292508, -0.018495784704914267, 0.49215347095865736, 0.4757531237109939, 0.2764394064547478, 0.4407445570246603, -0.35589004897695586, -0.5575204136749462, 0.06555145360253839, 0.10066592342357933, -0.08133043583969396, -0.04865777549009496, -0.32091367272539256, -0.24587149475215966, 0.26338232898335573, 0.6809251047705402, -0.45060094772790493, -0.43679636493563456, 0.5434268428448461, 0.6461112100968366, -0.5981438895175561, -0.21412608473529285, -0.4644426267196697, -0.2707731747247247, -0.45935747432323265, -0.2980697604444566, -0.07857420316027139, 0.23446281714767886, 0.39923717364799993, -0.06727843907598367, -0.9216280939052244, -0.5863590778173474, -0.0060846304123884885, -0.006873077265664959, 0.04927932634140275, -0.2674199371557609, -0.3836169955513916, -0.430416799396285, -0.2860880692704282, -0.10737580479126044, 0.18372478573531228, -0.17210051286488337, 0.4525633974701818, 0.3745381792958451, 0.24240033741493713, 0.3381270192488066, 0.317120472765573, 0.2247407613794222, 0.46955462978237694, 0.521534517460076, 0.21254319822129963, -0.3215978135897146, 0.5798524325385368, -0.8014624628912289, -0.10190938779052192, 0.26534467483320395, 0.39503580006383354, 0.2532994723833289, -0.4007279379652633, -0.2242376788834598, -0.24802709802619308, 0.12696082956848698, -0.768619351261632, -0.707600589791762, 0.17073999868911258, -0.15045338170356237, -0.17274230778668018, 0.4757565296965629, 0.07289011641841191, 0.31913820998123765, 0.14234747348906768, 0.6389883411482165, 0.12841204374086365, -0.5030041437434024, 0.5622795203875532, 0.44539332804673004, 0.4905615897728912, -0.4392843742925229, -0.17148800431129194, 0.3883352773668184, 0.11725269250870055, -0.4624485803791781, 0.6166226416590697, -0.28192873803722784, 0.23562574596253358, -0.29549186621615464, -0.1325019967976578, 0.09578563454627412, -0.04070048625813032, -0.26855962443904263, 0.5344319344212737, -0.39544026783166664, 0.16765324339691354, 0.23525359857291528, 0.7669304612562479, -0.25947178256777514, -0.1542050269178476, -0.36728291356295756, 0.38840472793279734, -0.03902129415423977, -0.17415931242369573, -0.002093815975822356, -0.5526104980513473, -0.5184288950547482, -0.3131813514374828, 0.02952071155339778, 0.5101192185081155, 0.4459526996626987, 0.7733271593401491, 0.48037652501570743, 0.3166418967380515, -0.42710978478173356, 0.530634814466838, -0.19067708719094056, -0.12884532800730586, 0.0509098899787168, 0.5193845041534031, 0.3094733463214483, 0.13795511748383543, 0.48056322536611745, 0.3762264521159678, 0.2130129361317615, 0.021238666342816515, 0.6119900010134272, -0.10016180834256985, -0.17673593978103305, 0.6837190229599341, 0.33138120887085604, 0.30631639638444386, -0.271990741034532, 0.17755658495360493, -0.032739472858935685, 0.16147452563188167, 0.35534121649980077, -0.5734507214281991, -0.10153975913604305, -0.6941542556072668, 0.368336095311231, -0.026001031366955543, -0.2672632653859476, 0.12169178767022606, 0.559097046641967, -0.18345046857122305, 0.3228817738232071, 0.08410331158650595, 0.1365837963006936, -0.6665269788442039, 0.35687136114710344, -0.34674878870353565, -0.2895810261297585, -0.24127103224261962, 0.042822922568842375, -0.1967539593382254, -0.4506835861579345, -0.15813398935488096, -0.19775773527414925, 0.05772966049898172, -0.4077549255992301, 0.41029930142358595, 0.2315327041345719, 0.6526094229043432, 0.9426479283447569, 0.0562036021620706, -0.21626405454925526, 0.1966441269896953, -0.27118934486831436, 0.5669260392107105, -0.20701555404229055, -0.10130191322905169, 0.40464851407190927, 0.22170717448904836, 0.5758965141777205, 0.4334643691717283, -0.33089767016298616, 0.282903013796536, -0.037656060602372046, -0.15865170982915164, -0.4793041093258329, -0.7057721883499414, 0.8971556894136966, 0.3646150779100372, -0.5285653527794566, 0.08418792223158282, -0.44457675244303496, -0.09634029292930274, -0.2701497029522451, 0.22081393579158415, 0.4620937804781099, 0.35474027845788525, -0.3065360868904846, 0.4577943902743166, -0.04254951552077502, -0.013938277239586815, -0.026577769724354706, -0.14901452781613436, 0.6303469415020572, 0.3161141417762979, -0.4364624560361346, -0.18690606565936813, -0.031124464640392993, -0.06590143507511878, -0.6188668743172384, -0.2114963574293932, 0.15121194045652936, -0.6025579665112338, 0.03748125153688646, 0.32354981275958655, -0.7547852021644749, 0.6463542071611154, 0.542294798754353, -0.5488158857611002, -0.17429203738112112, 0.3938324354316025, -0.2621840347471908, -0.224914474632255, -0.5215575865446589, 0.2916333234837445, -0.17272875979176916, 0.009823612876517007, -0.6262724176915428, -0.1293610416025026, 0.15346363434578308, -0.37530939299989496, 0.009635013738052409, -0.05899648990513387, 0.44854335261730727, 0.35862696070918254, -0.07820515199478587, -0.30077648760189235, -0.4686076286825297, -0.06870008859462712, 0.7171945487391235, 0.5468416686992984, -0.2843542396781106, -0.36571469592014083, 0.2891171994607581, -0.20312674295640737, 0.10891974668475093, 0.5838871414971059, 0.37034995748514987, 0.3551165468452422, -0.008820509379568159, -0.47852932453197383, -0.422826395463836, 0.45106644755021896, -0.703119477914417, 0.12544815700158762, -0.03533913466973449, -0.07094649914403915, 0.11096860944170865, 0.07214910638269435, 0.06879229349842997, -0.20413030086332126, 0.3254062586700517, -0.3206741001807343, -0.45643035045803854, 0.49259152222049485, 0.0838244330363611, -0.614579203746183, -0.040377777797429126, -0.34059916739714835, -0.11505560645261596, -0.2808757220068629, 0.20950948091448163, 0.4367765214397049, -0.7501620748306363, -0.45150951551718804, -0.30350230447507076, -0.09319482691123301, 0.7586993123427154, -0.07281313767914825, 0.3423416244853146, 0.09073049761679561, 0.3192997113338069, -0.2098995261973281, 0.7525807111204552, 0.22707589204401046, 0.5398682806288586, -0.0035796199548248225, -0.3586159568266985, -0.517949248019606, 0.038138272423835856, 0.0872854713013171, -0.3027551744799897, -0.4449691070627288, -0.34459693038449496, -0.2796633156815431, -0.47932347881257265, -0.24101468823607677, 0.6097455937934977, -0.7253947699163766, -0.2772624038594965, 0.7785858431485592, -0.08033806888357993, -0.5063040618714446, -0.24919003785389432, -0.07591733408595243, 0.5200151951128826, -0.07896727911822442, -0.38246550536762525, 0.40326107521863164, 0.7539394758739755, -0.07327054668117865, 0.45951820633616997, 0.06104271135802984, -0.11731419071266547, 0.18875481664673288, -0.14635927625729508, 0.0564239968949774, 0.5621742441938431, 0.4830227059643939, 0.12369559016708154, -0.032031063327210146, 0.1474167786646553, -0.7359847367223725, 0.1844280252861404, 0.46442650395746315, -0.5276556551919839, 0.030624462763524388, 0.002467949539812206, -0.0793206455031425, 0.5869159911877506, 0.17212581904197008, -0.43388811374735703, 0.6635473677363979, 0.7201067262042619, 0.0220846371755838, -0.33605751844311427, -0.507330867495591, 0.004632271244618527, 0.7629009876320889, 0.14701415689895553, -0.24293743946017707, -0.16125187959315704, 0.07543397475978741, -0.43091826257904164, 0.6703370530450895, -0.47269658470435727, 0.4148421268886551, -0.15445862102393712, 0.14746785336013415, -0.09334101329149405, -0.010742023646616944, -0.15998478844698102, -0.16700135670398597, 0.10956112693086652, -0.13262128041297738, 0.2758789052966285, -0.20700382202277914, 0.18445046157312117, -0.15035959232732526, 0.2800420546695606, -0.15192640348744163, -0.26445352370823993, -0.018549176484251615, -0.043428124277900264, 0.16948571422901654, -0.14101802243276051, 0.169627451137796, 0.19009767810851194, -0.26130802761615096, -0.12101347455153519};
		//double w2_c[] = {};
		//double w3_c[] = {};

//		double wa_a_c[] = {};
//		double wa_d_c[] = {};

		arbi->Randomize();
		//w1->Randomize();
		w2->Randomize();
		w3->Randomize();

		wa_a->Randomize();
		wa_d->Randomize();

//		arbi->Set(arbi_c);
		w1->Set(w1_c);
//		w2->Set(w2_c);
//		w3->Set(w3_c);

//		wa_a->Set(wa_a_c);
//		wa_d->Set(wa_d_c);

		J0_S_Field::Configuration conf;
		conf.World = m_world;
		conf.TimeStep = 0.02;
		conf.TrainingMode = 1;
		m_scenemgr = new J0_S_Field(&conf, arbi, w1, w2, w3);
		//m_scenemgr = new J0_S_Field_S(&conf, wa_a, wa_d);
	}

	void Step(Settings* settings) {
		std::cout<<m_stepCount<<":   ";
		Test::Step(settings);

//		for(int i = 30; i < 33; i++) {
//			std::cout<<static_cast<J0_S_Field*>(m_scenemgr)->m_robot[0]->GetDataPool().Get<float>(i)<<", ";
//		}

		Draw_Arbi();
		std::cout<<std::endl;
	}

	/// Draw Nests.
	void DrawNest(float a) {
		m_debugDraw.DrawSegment(b2Vec2(-a, -a), b2Vec2(-a, a),
				b2Color(0.8f, 0.8f, 0.8f));
		m_debugDraw.DrawSegment(b2Vec2(-a, a), b2Vec2(a, a),
				b2Color(0.8f, 0.8f, 0.8f));
		m_debugDraw.DrawSegment(b2Vec2(a, a), b2Vec2(a, -a),
				b2Color(0.8f, 0.8f, 0.8f));
		m_debugDraw.DrawSegment(b2Vec2(a, -a), b2Vec2(-a, -a),
				b2Color(0.8f, 0.8f, 0.8f));
	}
	void DrawCircleNest(const b2Vec2& center, float32 radius, const b2Color& color) {
		m_debugDraw.DrawCircle(center, radius, color);
	}

	/// Implementation function.
	static Test* Create() {
		return new Replay;
	}

	/// Draw colors.
	void Draw_Arbi() {
		b2Vec2 w_v[10];

		// walls
		w_v[3] = b2Vec2(69.284f, 20.0f);
		w_v[2] = b2Vec2(69.284f, 21.0f);
		w_v[1] = b2Vec2(48.698f, 21.0f);
		w_v[0] = b2Vec2(48.284f, 20.0f);
		DrawSolidPolygon(w_v, 4, b2Color(0.2, 0.2, 0.2));

		w_v[3] = b2Vec2(48.284f, 20.0f);
		w_v[2] = b2Vec2(48.698f, 21.0f);
		w_v[1] = b2Vec2(20.414f, 49.284f);
		w_v[0] = b2Vec2(20.0f, 48.284f);
		DrawSolidPolygon(w_v, 4, b2Color(0.2, 0.2, 0.2));

		w_v[3] = b2Vec2(20.0f, 48.284f);
		w_v[2] = b2Vec2(20.414f, 49.284f);
		w_v[1] = b2Vec2(-20.414f, 49.284f);
		w_v[0] = b2Vec2(-20.0f, 48.284f);
		DrawSolidPolygon(w_v, 4, b2Color(0.2, 0.2, 0.2));

		w_v[3] = b2Vec2(-20.0f, 48.284f);
		w_v[2] = b2Vec2(-20.414f, 49.284f);
		w_v[1] = b2Vec2(-48.698f, 21.0f);
		w_v[0] = b2Vec2(-48.284f, 20.0f);
		DrawSolidPolygon(w_v, 4, b2Color(0.2, 0.2, 0.2));

		w_v[3] = b2Vec2(-48.284f, 20.0f);
		w_v[2] = b2Vec2(-48.698f, 21.0f);
		w_v[1] = b2Vec2(-69.284f, 21.0f);
		w_v[0] = b2Vec2(-69.284f, 20.0f);
		DrawSolidPolygon(w_v, 4, b2Color(0.2, 0.2, 0.2));

		w_v[3] = b2Vec2(-68.284f, -21.0f);
		w_v[2] = b2Vec2(-68.284f, 21.0f);
		w_v[1] = b2Vec2(-69.284f, 21.0f);
		w_v[0] = b2Vec2(-69.284f, -21.0f);
		DrawSolidPolygon(w_v, 4, b2Color(0.2, 0.2, 0.2));

		w_v[3] = b2Vec2(-48.698f, -21.0f);
		w_v[2] = b2Vec2(-48.284f, -20.0f);
		w_v[1] = b2Vec2(-69.284f, -20.0f);
		w_v[0] = b2Vec2(-69.284f, -21.0f);
		DrawSolidPolygon(w_v, 4, b2Color(0.2, 0.2, 0.2));

		w_v[3] = b2Vec2(-20.414f, -49.284f);
		w_v[2] = b2Vec2(-20.0f, -48.284f);
		w_v[1] = b2Vec2(-48.284f, -20.0f);
		w_v[0] = b2Vec2(-48.698f, -21.0f);
		DrawSolidPolygon(w_v, 4, b2Color(0.2, 0.2, 0.2));

		w_v[3] = b2Vec2(20.414f, -49.284f);
		w_v[2] = b2Vec2(20.0f, -48.284f);
		w_v[1] = b2Vec2(-20.0f, -48.284f);
		w_v[0] = b2Vec2(-20.414f, -49.284f);
		DrawSolidPolygon(w_v, 4, b2Color(0.2, 0.2, 0.2));

		w_v[3] = b2Vec2(48.698f, -21.0f);
		w_v[2] = b2Vec2(48.284f, -20.0f);
		w_v[1] = b2Vec2(20.0f, -48.284f);
		w_v[0] = b2Vec2(20.414f, -49.284f);
		DrawSolidPolygon(w_v, 4, b2Color(0.2, 0.2, 0.2));

		w_v[3] = b2Vec2(48.698f, -21.0f);
		w_v[2] = b2Vec2(69.284f, -21.0f);
		w_v[1] = b2Vec2(69.284f, -20.0f);
		w_v[0] = b2Vec2(48.284f, -20.0f);
		DrawSolidPolygon(w_v, 4, b2Color(0.2, 0.2, 0.2));

		w_v[3] = b2Vec2(68.284f, -21.0f);
		w_v[2] = b2Vec2(69.284f, -21.0f);
		w_v[1] = b2Vec2(69.284f, 21.0f);
		w_v[0] = b2Vec2(68.284f, 21.0f);
		DrawSolidPolygon(w_v, 4, b2Color(0.2, 0.2, 0.2));

		// field
		w_v[7] = b2Vec2(48.284f, 20.0f);
		w_v[6] = b2Vec2(20.0f, 48.284f);
		w_v[5] = b2Vec2(-20.0f, 48.284f);
		w_v[4] = b2Vec2(-48.284f, 20.0f);
		w_v[3] = b2Vec2(-48.284f, -20.0f);
		w_v[2] = b2Vec2(-20.0f, -48.284f);
		w_v[1] = b2Vec2(20.0f, -48.284f);
		w_v[0] = b2Vec2(48.284f, -20.0f);
		DrawSolidPolygon(w_v, 8, b2Color(0.8, 0.8, 0.8));

		// nest_resource
		w_v[3] = b2Vec2(-48.284f, 20.0f);
		w_v[2] = b2Vec2(-68.284f, 20.0f);
		w_v[1] = b2Vec2(-68.284f, -20.0f);
		w_v[0] = b2Vec2(-48.284f, -20.0f);
		DrawSolidPolygon(w_v, 4, b2Color(0.69, 0.79, 0.69));

		// nest_resource
		w_v[3] = b2Vec2(48.284f, 20.0f);
		w_v[2] = b2Vec2(48.284f, -20.0f);
		w_v[1] = b2Vec2(68.284f, -20.0f);
		w_v[0] = b2Vec2(68.284f, 20.0f);
		DrawSolidPolygon(w_v, 4, b2Color(1.0, 0.75, 0.55));

		// barriers
		{
			if(m_scenemgr->CountNodesByTag(MAKE_TAG('b', 'a', 'r', 'r')) > 0) {
				for(auto package : m_scenemgr->GetNodesByTag(MAKE_TAG('b', 'a', 'r', 'r'))) {
					b2Color col = b2Color(0.2f, 0.2f, 0.2f);
					b2Body* bd = static_cast<Block*>(package)->GetBody();
					w_v[3] = bd->GetWorldPoint(b2Vec2(0.3f, 2.5f));
					w_v[2] = bd->GetWorldPoint(b2Vec2(-0.3f, 2.5f));
					w_v[1] = bd->GetWorldPoint(b2Vec2(-0.3f, -2.5f));
					w_v[0] = bd->GetWorldPoint(b2Vec2(0.3f, -2.5f));
					DrawSolidPolygon(w_v, 4, col);
				}
			}
		}

		// robots
		for(auto robot : m_scenemgr->GetNodesByTag(MAKE_TAG('r', 'o', 'b', 'o'))) {
			b2Body* bd1 = static_cast<J0_A_Robot*>(robot)->m_motor[0]->GetBody();
			w_v[0] = bd1->GetWorldPoint(b2Vec2(-0.25, -0.1));
			w_v[1] = bd1->GetWorldPoint(b2Vec2(0.25, -0.1));
			w_v[2] = bd1->GetWorldPoint(b2Vec2(0.25, 0.1));
			w_v[3] = bd1->GetWorldPoint(b2Vec2(-0.25, 0.1));
			DrawSolidPolygon(w_v, 4, b2Color(0.2, 0.2, 0.2));
			b2Body* bd2 = static_cast<J0_A_Robot*>(robot)->m_motor[1]->GetBody();
			w_v[0] = bd2->GetWorldPoint(b2Vec2(-0.25, -0.1));
			w_v[1] = bd2->GetWorldPoint(b2Vec2(0.25, -0.1));
			w_v[2] = bd2->GetWorldPoint(b2Vec2(0.25, 0.1));
			w_v[3] = bd2->GetWorldPoint(b2Vec2(-0.25, 0.1));
			DrawSolidPolygon(w_v, 4, b2Color(0.2, 0.2, 0.2));
			b2Color col;
			switch(static_cast<J0_A_Robot*>(robot)->GetMode()) {
			case 1:
				col.Set(0.0f, 0.0f, 1.0f);
				break;
			case 2:
				col.Set(1.0f, 0.0f, 0.0f);
				break;
			case 3:
				col.Set(0.0f, 1.0f, 0.0f);
				break;
			default:
				col.Set(0.0f, 0.0f, 0.0f);
				break;
			}
 			DrawSolidCircle(static_cast<J0_A_Robot*>(robot)->GetMainComponent()->GetPosition(), 0.5f, col);

			if(robot->GetId()==0) {
				m_debugDraw.DrawCircle(static_cast<J0_A_Robot*>(robot)->GetMainComponent()->GetPosition(), 8.0f, b2Color(0.4,0.6,0.8));
			}
		}

		// resource
		if(m_scenemgr->CountNodesByTag(MAKE_TAG('r', 'e', 's', 'o')) > 0) {
			for(auto resource : m_scenemgr->GetNodesByTag(MAKE_TAG('r', 'e', 's', 'o'))) {
				b2Color col;
				if(resource->CheckFlag(CATCHED_FLAG)) {
					col.Set(0.7f, 0.0f, 0.7f);
				} else {
					col.Set(0.6,0.35,0.18);
				}
				DrawSolidCircle(static_cast<Block*>(resource)->GetPosition(), static_cast<Block*>(resource)->GetBody()->GetFixtureList()->GetShape()->m_radius, col);
			}
		}

		// package
		if(m_scenemgr->CountNodesByTag(MAKE_TAG('p', 'a', 'c', 'k')) > 0) {
			for(auto package : m_scenemgr->GetNodesByTag(MAKE_TAG('p', 'a', 'c', 'k'))) {
				b2Color col = b2Color(0.4f, 0.6f, 0.65f);
				b2Body* bd = static_cast<Block*>(package)->GetBody();
				w_v[3] = bd->GetWorldPoint(b2Vec2(2.5f, 3.75f));
				w_v[2] = bd->GetWorldPoint(b2Vec2(-2.5f, 3.75f));
				w_v[1] = bd->GetWorldPoint(b2Vec2(-2.5f, -3.75f));
				w_v[0] = bd->GetWorldPoint(b2Vec2(2.5f, -3.75f));
				DrawSolidPolygon(w_v, 4, col);
			}
		}
	}
	void Draw_W() {
			b2Vec2 w_v[10];

			// walls
			w_v[3] = b2Vec2(69.284f, 20.0f);
			w_v[2] = b2Vec2(69.284f, 21.0f);
			w_v[1] = b2Vec2(48.698f, 21.0f);
			w_v[0] = b2Vec2(48.284f, 20.0f);
			DrawSolidPolygon(w_v, 4, b2Color(0.2, 0.2, 0.2));

			w_v[3] = b2Vec2(48.284f, 20.0f);
			w_v[2] = b2Vec2(48.698f, 21.0f);
			w_v[1] = b2Vec2(20.414f, 49.284f);
			w_v[0] = b2Vec2(20.0f, 48.284f);
			DrawSolidPolygon(w_v, 4, b2Color(0.2, 0.2, 0.2));

			w_v[3] = b2Vec2(20.0f, 48.284f);
			w_v[2] = b2Vec2(20.414f, 49.284f);
			w_v[1] = b2Vec2(-20.414f, 49.284f);
			w_v[0] = b2Vec2(-20.0f, 48.284f);
			DrawSolidPolygon(w_v, 4, b2Color(0.2, 0.2, 0.2));

			w_v[3] = b2Vec2(-20.0f, 48.284f);
			w_v[2] = b2Vec2(-20.414f, 49.284f);
			w_v[1] = b2Vec2(-48.698f, 21.0f);
			w_v[0] = b2Vec2(-48.284f, 20.0f);
			DrawSolidPolygon(w_v, 4, b2Color(0.2, 0.2, 0.2));

			w_v[3] = b2Vec2(-48.284f, 20.0f);
			w_v[2] = b2Vec2(-48.698f, 21.0f);
			w_v[1] = b2Vec2(-69.284f, 21.0f);
			w_v[0] = b2Vec2(-69.284f, 20.0f);
			DrawSolidPolygon(w_v, 4, b2Color(0.2, 0.2, 0.2));

			w_v[3] = b2Vec2(-68.284f, -21.0f);
			w_v[2] = b2Vec2(-68.284f, 21.0f);
			w_v[1] = b2Vec2(-69.284f, 21.0f);
			w_v[0] = b2Vec2(-69.284f, -21.0f);
			DrawSolidPolygon(w_v, 4, b2Color(0.2, 0.2, 0.2));

			w_v[3] = b2Vec2(-48.698f, -21.0f);
			w_v[2] = b2Vec2(-48.284f, -20.0f);
			w_v[1] = b2Vec2(-69.284f, -20.0f);
			w_v[0] = b2Vec2(-69.284f, -21.0f);
			DrawSolidPolygon(w_v, 4, b2Color(0.2, 0.2, 0.2));

			w_v[3] = b2Vec2(-20.414f, -49.284f);
			w_v[2] = b2Vec2(-20.0f, -48.284f);
			w_v[1] = b2Vec2(-48.284f, -20.0f);
			w_v[0] = b2Vec2(-48.698f, -21.0f);
			DrawSolidPolygon(w_v, 4, b2Color(0.2, 0.2, 0.2));

			w_v[3] = b2Vec2(20.414f, -49.284f);
			w_v[2] = b2Vec2(20.0f, -48.284f);
			w_v[1] = b2Vec2(-20.0f, -48.284f);
			w_v[0] = b2Vec2(-20.414f, -49.284f);
			DrawSolidPolygon(w_v, 4, b2Color(0.2, 0.2, 0.2));

			w_v[3] = b2Vec2(48.698f, -21.0f);
			w_v[2] = b2Vec2(48.284f, -20.0f);
			w_v[1] = b2Vec2(20.0f, -48.284f);
			w_v[0] = b2Vec2(20.414f, -49.284f);
			DrawSolidPolygon(w_v, 4, b2Color(0.2, 0.2, 0.2));

			w_v[3] = b2Vec2(48.698f, -21.0f);
			w_v[2] = b2Vec2(69.284f, -21.0f);
			w_v[1] = b2Vec2(69.284f, -20.0f);
			w_v[0] = b2Vec2(48.284f, -20.0f);
			DrawSolidPolygon(w_v, 4, b2Color(0.2, 0.2, 0.2));

			w_v[3] = b2Vec2(68.284f, -21.0f);
			w_v[2] = b2Vec2(69.284f, -21.0f);
			w_v[1] = b2Vec2(69.284f, 21.0f);
			w_v[0] = b2Vec2(68.284f, 21.0f);
			DrawSolidPolygon(w_v, 4, b2Color(0.2, 0.2, 0.2));

			// field
			w_v[7] = b2Vec2(48.284f, 20.0f);
			w_v[6] = b2Vec2(20.0f, 48.284f);
			w_v[5] = b2Vec2(-20.0f, 48.284f);
			w_v[4] = b2Vec2(-48.284f, 20.0f);
			w_v[3] = b2Vec2(-48.284f, -20.0f);
			w_v[2] = b2Vec2(-20.0f, -48.284f);
			w_v[1] = b2Vec2(20.0f, -48.284f);
			w_v[0] = b2Vec2(48.284f, -20.0f);
			DrawSolidPolygon(w_v, 8, b2Color(0.8, 0.8, 0.8));

			// nest_resource
			w_v[3] = b2Vec2(-48.284f, 20.0f);
			w_v[2] = b2Vec2(-68.284f, 20.0f);
			w_v[1] = b2Vec2(-68.284f, -20.0f);
			w_v[0] = b2Vec2(-48.284f, -20.0f);
			DrawSolidPolygon(w_v, 4, b2Color(0.69, 0.79, 0.69));

			// nest_resource
			w_v[3] = b2Vec2(48.284f, 20.0f);
			w_v[2] = b2Vec2(48.284f, -20.0f);
			w_v[1] = b2Vec2(68.284f, -20.0f);
			w_v[0] = b2Vec2(68.284f, 20.0f);
			DrawSolidPolygon(w_v, 4, b2Color(1.0, 0.75, 0.55));

			// barriers
			{
				if(m_scenemgr->CountNodesByTag(MAKE_TAG('b', 'a', 'r', 'r')) > 0) {
					for(auto package : m_scenemgr->GetNodesByTag(MAKE_TAG('b', 'a', 'r', 'r'))) {
						b2Color col = b2Color(0.2f, 0.2f, 0.2f);
						b2Body* bd = static_cast<Block*>(package)->GetBody();
						w_v[3] = bd->GetWorldPoint(b2Vec2(0.3f, 2.5f));
						w_v[2] = bd->GetWorldPoint(b2Vec2(-0.3f, 2.5f));
						w_v[1] = bd->GetWorldPoint(b2Vec2(-0.3f, -2.5f));
						w_v[0] = bd->GetWorldPoint(b2Vec2(0.3f, -2.5f));
						DrawSolidPolygon(w_v, 4, col);
					}
				}
			}

			// robots
			for(auto robot : m_scenemgr->GetNodesByTag(MAKE_TAG('r', 'o', 'b', 'o'))) {
				b2Body* bd1 = static_cast<J0_A_Robot_S*>(robot)->m_motor[0]->GetBody();
				w_v[0] = bd1->GetWorldPoint(b2Vec2(-0.25, -0.1));
				w_v[1] = bd1->GetWorldPoint(b2Vec2(0.25, -0.1));
				w_v[2] = bd1->GetWorldPoint(b2Vec2(0.25, 0.1));
				w_v[3] = bd1->GetWorldPoint(b2Vec2(-0.25, 0.1));
				DrawSolidPolygon(w_v, 4, b2Color(0.2, 0.2, 0.2));
				b2Body* bd2 = static_cast<J0_A_Robot_S*>(robot)->m_motor[1]->GetBody();
				w_v[0] = bd2->GetWorldPoint(b2Vec2(-0.25, -0.1));
				w_v[1] = bd2->GetWorldPoint(b2Vec2(0.25, -0.1));
				w_v[2] = bd2->GetWorldPoint(b2Vec2(0.25, 0.1));
				w_v[3] = bd2->GetWorldPoint(b2Vec2(-0.25, 0.1));
				DrawSolidPolygon(w_v, 4, b2Color(0.2, 0.2, 0.2));
				b2Color col(1.0f, 1.0f, 0.0f);

	 			DrawSolidCircle(static_cast<J0_A_Robot_S*>(robot)->GetMainComponent()->GetPosition(), 0.5f, col);

				if(robot->GetId()==0) {
					m_debugDraw.DrawCircle(static_cast<J0_A_Robot_S*>(robot)->GetMainComponent()->GetPosition(), 8.0f, b2Color(0.4,0.6,0.8));
				}
			}

			// resource
			if(m_scenemgr->CountNodesByTag(MAKE_TAG('r', 'e', 's', 'o')) > 0) {
				for(auto resource : m_scenemgr->GetNodesByTag(MAKE_TAG('r', 'e', 's', 'o'))) {
					b2Color col;
					if(resource->CheckFlag(CATCHED_FLAG)) {
						col.Set(0.7f, 0.0f, 0.7f);
					} else {
						col.Set(0.6,0.35,0.18);
					}
					DrawSolidCircle(static_cast<Block*>(resource)->GetPosition(), static_cast<Block*>(resource)->GetBody()->GetFixtureList()->GetShape()->m_radius, col);
				}
			}

			// package
			if(m_scenemgr->CountNodesByTag(MAKE_TAG('p', 'a', 'c', 'k')) > 0) {
				for(auto package : m_scenemgr->GetNodesByTag(MAKE_TAG('p', 'a', 'c', 'k'))) {
					b2Color col = b2Color(0.4f, 0.6f, 0.65f);
					b2Body* bd = static_cast<Block*>(package)->GetBody();
					w_v[3] = bd->GetWorldPoint(b2Vec2(2.5f, 3.75f));
					w_v[2] = bd->GetWorldPoint(b2Vec2(-2.5f, 3.75f));
					w_v[1] = bd->GetWorldPoint(b2Vec2(-2.5f, -3.75f));
					w_v[0] = bd->GetWorldPoint(b2Vec2(2.5f, -3.75f));
					DrawSolidPolygon(w_v, 4, col);
				}
			}
		}
};

#endif /* REPLAY_H_ */
